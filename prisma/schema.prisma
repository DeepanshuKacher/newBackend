// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL_Prod")
}

// owner
model Owner {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String
  middleName  String?
  lastName    String
  email       String       @unique
  hash        String
  restaurants Restaurant[]

  createdAt DateTime @default(now())
  updatedAd DateTime @updatedAt

  // defaultRestaurant Restaurant? @relation(name: "defaultRestaurant")
}

// restaurant staff
model Manager {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  firstName  String
  middleName String?
  lastName   String
  email      String  @unique
  hash       String

  createdAt DateTime @default(now())
  updatedAd DateTime @updatedAt

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String     @db.ObjectId
}

model Waiter {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  // DOB          DateTime
  DOJ          DateTime @default(now()) @db.Date
  MobileNumber Int?
  address      String?
  // gender       Gender

  passportPhoto String?
  identityPhoto String?

  verified  Boolean @default(false)
  available Boolean @default(true)

  Restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String     @db.ObjectId
  // AllowedOrderForLogs Order_Logs[] @relation(name: "allowedId")
  KotLog       KotLog[]
  KotOrder     KotOrder[]
}

model Chef {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  // DOB          DateTime
  DOJ          DateTime @default(now()) @db.Date
  MobileNumber Int?
  address      String?
  // gender       Gender

  passportPhoto String?
  identityPhoto String?

  verified  Boolean @default(false)
  available Boolean @default(true)

  Restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?     @db.ObjectId
  KotLog       KotLog[]
  KotOrder     KotOrder[]
}

// restaurant
model Restaurant {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  state     String
  city      String
  latitude  Float
  longitude Float

  dishesh     Dish[]
  dishSection DishSection[]

  tables Table[]

  waiters Waiter[]

  manager Manager[]

  chefs Chef[]

  orderData DishData[]

  sessionLogs SessionLogs[]

  owner   Owner  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String @db.ObjectId

  // startingTime DateTime? @db.Timestamp

  createdAt DateTime @default(now())
  updatedAd DateTime @updatedAt

  restaurantSettingForWaiter RestaurantSettings_Waiter?

  // defaultOwner   Owner?  @relation(fields: [defaultOwnerId], references: [id], name: "defaultRestaurant")
  // defaultOwnerId String? @unique @db.ObjectId

  commitToken       String? //this is important
  billPrintTemplate BillPrintTemplate?
  RestaurantRevenue RestaurantRevenue[]
  KotOrder          KotOrder[]
  KotLog            KotLog[]
}

type RestaurantSettings_Waiter {
  allowWaiterToClearSession Boolean @default(false)
}

// restaurant stuff

model DishSection {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  sectionName String

  dishesh Dish[]

  Restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String     @db.ObjectId
}

type AddOns {
  name  String
  price Int
}

type QuantityPrice {
  half Int?
  full Int?
}

type SizePrice {
  large  QuantityPrice?
  medium QuantityPrice?
  small  QuantityPrice?
}

model Dish {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  imageUrl    String?
  addOns      AddOns[]
  price       SizePrice
  dishCode    Int?

  available Boolean @default(true)

  DishSection   DishSection @relation(fields: [dishSectionId], references: [id], onDelete: Cascade)
  dishSectionId String      @db.ObjectId

  Restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String     @db.ObjectId

  ordersData DishData[]
  KotOrder   KotOrder[]
}

model Table {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  prefix       String?
  suffix       String?
  startNumber  Int
  endNumber    Int
  Restaurant   Restaurant    @relation(fields: [restaurantId], references: [id])
  restaurantId String        @db.ObjectId
  SessionLogs  SessionLogs[]
  KotLog       KotLog[]
  KotOrder     KotOrder[]
}

enum OperationType {
  Plus
  Minus
  Multiply
  Divide
  Percentage
}

enum GainLoss {
  gain
  loss
}

type Operations {
  label     String
  number    Float
  operation OperationType
  gainLoss  GainLoss
}

model BillPrintTemplate {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  restaurant       Restaurant   @relation(fields: [restaurantId], references: [id])
  restaurantId     String       @unique @db.ObjectId
  upperSectionText String?
  operations       Operations[]
}

// order stuff
enum DishSize {
  large
  medium
  small
}

model DishData {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  dish   Dish   @relation(fields: [dishId], references: [id], onDelete: Cascade)
  dishId String @db.ObjectId

  DishSize DishSize
  cost     Float

  fullQuantity Int?
  halfQuantity Int?

  dateOfOrder  DateTime   @db.Date
  Restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String     @db.ObjectId
}

model SessionLogs {
  id                  String     @id @default(auto()) @map("_id") @db.ObjectId
  // Order_Logs          Order_Logs[] @relation(name: "mongodbId")
  tableNumber         Int
  tableSection        Table?     @relation(fields: [tableId], references: [id], onDelete: Cascade)
  tableId             String?    @db.ObjectId
  sessionCreationTime DateTime   @default(now())
  Restaurant          Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId        String     @db.ObjectId
  KotLog              KotLog[]
  KotOrder            KotOrder[]
}

enum OrderBy {
  waiter
  self
  manager
}

model KotOrder {
  // KotOrder is child of KotLogs
  id String @id @default(auto()) @map("_id") @db.ObjectId

  dateTime DateTime

  dish   Dish   @relation(fields: [dishId], references: [id], onDelete: Cascade)
  dishId String @db.ObjectId

  kot      KotLog @relation(fields: [kotLogId], references: [id], onDelete: Cascade)
  kotLogId String @db.ObjectId

  size         DishSize
  cost         Int
  fullQuantity Int?
  halfQuantity Int?

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String     @db.ObjectId

  table   Table?  @relation(fields: [tableId], references: [id])
  tableId String? @db.ObjectId

  tableNumber Int?

  user_description String?

  orderBy OrderBy

  waiter   Waiter? @relation(fields: [waiterId], references: [id])
  waiterId String? @db.ObjectId

  chef   Chef?   @relation(fields: [chefId], references: [id])
  chefId String? @db.ObjectId

  session       SessionLogs? @relation(fields: [sessionLogsId], references: [id], onDelete: Cascade)
  sessionLogsId String?      @db.ObjectId
}

model KotLog {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  parcel Boolean? @default(false)

  session       SessionLogs? @relation(fields: [sessionLogsId], references: [id], onDelete: Cascade)
  sessionLogsId String?      @db.ObjectId

  table   Table?  @relation(fields: [tableId], references: [id], onDelete: Cascade)
  tableId String? @db.ObjectId

  tableNumber Int?

  orderedBy OrderBy

  waiter   Waiter? @relation(fields: [waiterId], references: [id])
  waiterId String? @db.ObjectId

  chef     Chef?      @relation(fields: [chefId], references: [id])
  chefId   String?    @db.ObjectId
  KotOrder KotOrder[]

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String     @db.ObjectId

  createdAt DateTime
}

enum ModeOfIncome {
  online
  cash
}

model RestaurantRevenue {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String     @db.ObjectId

  revenueGenerated Float

  // date DateTime @db.Date

  dateTime DateTime? @default(now())

  modeOfIncome ModeOfIncome?

  parcelRevenue Boolean? @default(false)
}
