// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Owner {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String
  middleName  String?
  lastName    String
  email       String       @unique
  hash        String
  restaurants Restaurant[]

  createdAt DateTime @default(now())
  updatedAd DateTime @updatedAt

  defaultRestaurant Restaurant? @relation(name: "defaultRestaurant")
}

model Restaurant {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  state     String
  city      String
  latitude  Float
  longitude Float

  dishesh     Dish[]
  dishSection DishSection[]

  tables Table[]

  waiters Waiter[]

  chefs Chef[]

  orderData OrdersData[]

  owner   Owner  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAd DateTime @updatedAt

  restaurantSettingForWaiter RestaurantSettings_Waiter?

  defaultOwner   Owner?  @relation(fields: [defaultOwnerId], references: [id], name: "defaultRestaurant")
  defaultOwnerId String? @unique @db.ObjectId

  commitToken String? //this is important
}

type RestaurantSettings_Waiter {
  allowWaiterToClearSession Boolean @default(false)
}

model DishSection {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  sectionName String

  dishesh Dish[]

  Restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String     @db.ObjectId
}

type AddOns {
  name  String
  price Int
}

type QuantityPrice {
  half Int?
  full Int?
}

type SizePrice {
  large  QuantityPrice?
  medium QuantityPrice?
  small  QuantityPrice?
}

model Dish {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  description      String?
  imageUrl         String?
  addOns           AddOns[]
  FullLarge_Price  Int?
  FullMedium_Price Int?
  FullSmall_Price  Int?
  HalfLarge_Price  Int?
  HalfMedium_Price Int?
  HalfSmall_Price  Int?
  Price            SizePrice?

  available Boolean @default(true)

  DishSection   DishSection @relation(fields: [dishSectionId], references: [id], onDelete: Cascade)
  dishSectionId String      @db.ObjectId

  Restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String     @db.ObjectId

  OrdersData OrdersData[]
  Order_Logs Order_Logs[]
}

model Table {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  prefix       String?
  suffix       String?
  startNumber  Int
  endNumber    Int
  Restaurant   Restaurant    @relation(fields: [restaurantId], references: [id])
  restaurantId String        @db.ObjectId
  SessionLogs  SessionLogs[]
}

model Waiter {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  // DOB          DateTime
  DOJ          DateTime @default(now()) @db.Date
  MobileNumber Int?
  address      String?
  // gender       Gender

  passportPhoto String?
  identityPhoto String?

  verified  Boolean @default(false)
  available Boolean @default(true)

  Restaurant   Restaurant   @relation(fields: [restaurantId], references: [id])
  restaurantId String       @db.ObjectId
  Order_Logs   Order_Logs[]
  // AllowedOrderForLogs Order_Logs[] @relation(name: "allowedId")
}

model Chef {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  // DOB          DateTime
  DOJ          DateTime @default(now()) @db.Date
  MobileNumber Int?
  address      String?
  // gender       Gender

  passportPhoto String?
  identityPhoto String?

  verified  Boolean @default(false)
  available Boolean @default(true)

  Restaurant   Restaurant?  @relation(fields: [restaurantId], references: [id])
  restaurantId String?      @db.ObjectId
  Order_Logs   Order_Logs[]
}

// order data
enum DishSize {
  Large
  Medium
  Small
}

model OrdersData {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  dish   Dish   @relation(fields: [dishId], references: [id], onDelete: Cascade)
  dishId String @db.ObjectId

  DishSize DishSize
  cost     Int

  fullQuantity Int?
  halfQuantity Int?

  dateOfOrder  DateTime   @db.Date
  Restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String     @db.ObjectId
}

model SessionLogs {
  // id                  String       @id @default(auto()) @map("_id") @db.ObjectId
  uuid                String       @id @map("_id")
  // Order_Logs          Order_Logs[] @relation(name: "mongodbId")
  Order_Logs          Order_Logs[]
  tableNumber         Int
  tableSection        Table        @relation(fields: [tableId], references: [id], onDelete: Cascade)
  tableId             String       @db.ObjectId
  sessionCreationTime DateTime     @default(now())
}

model Order_Logs {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // belongSession SessionLogs @relation(fields: [sessionLogsId], references: [id], name: "mongodbId")
  // sessionLogsId String      @db.ObjectId
  SessionLogs     SessionLogs @relation(fields: [sessionLogsUuid], references: [uuid])
  sessionLogsUuid String

  dish   Dish   @relation(fields: [dishId], references: [id], onDelete: Cascade)
  dishId String @db.ObjectId

  user_description String?

  orderedBy Waiter? @relation(fields: [waiterId], references: [id])
  waiterId  String? @db.ObjectId
  // allowedBy Waiter? @relation(fields: [waiterId], references: [id], name: "allowedId")
  // allowedId String? @db.ObjectId

  size DishSize

  fullQuantity Int?
  halfQuantity Int?

  chefAssign Chef?   @relation(fields: [chefId], references: [id])
  chefId     String? @db.ObjectId

  orderTimeStamp DateTime @db.Timestamp
}
